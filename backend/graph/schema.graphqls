# schema.graphql

directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

# Auth Directive
directive @auth on FIELD_DEFINITION

scalar Any
scalar Upload

type User {
  id: ID!
  username: String!
  email: String!
  first_name: String!
  last_name: String!
  files: [File!]!
}

type File {
  id: ID!
  filename: String!
  mimetype: String!
  encoding: String!
  filesize: Int!
  url: String!
  createdAt: String!
  user: User!
}

input SignUp {
  username: String!
  email: String!
  password: String!
  first_name: String!
  last_name: String!
}

type AuthOps {
  login(email: String!, password: String!): Any! @goField(forceResolver: true)
  register(input: SignUp!): Any @goField(forceResolver: true)
}

type Query {
  user(id: ID!): User! @goField(forceResolver: true)
  protected: String! @goField(forceResolver: true) @auth
  validateAuth: User! @goField(forceResolver: true) @auth
  userFiles(id: ID!): [File!]! @goField(forceResolver: true)
}

type Mutation {
  auth: AuthOps! @goField(forceResolver: true)
  uploadFile(file: Upload!, userId: String!): File! @goField(forceResolver: true)
}
